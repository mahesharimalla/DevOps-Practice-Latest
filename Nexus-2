How to create the repos?
Integrate Repo with Maven Java Projects?
Release Repos
Snapshot Repos



Default port number for Nexus is 8081.
https://13.221.2.210:8081/----------------> Accessing the Nexus Server.

For changing the port number & application context path for nexus in file opt/nexus/etc/nexus-default.properties
#Jetty section
application-port=9980
nexus-context-path=/mithuntechnologies
:wq
If you made any changes then after doing the changes we need to restart the nexus service.
Command to restart the service: service nexus restart


Go to browser & browse the below mentioned link: 
https://13.221.2.210:9980/mithuntechnologies

Create a repositories in the Sonatype Nexus Repository Manager by selecting the default 
Create Repository--> Maven2(hosted)---> facebook-snapshot by selecting the maven2 version policy  with Snapshot
select default settings & create a repository.


Create Repository--> Maven2(hosted)---> facebook-releases by selecting the maven2 version policy  with Rlease 
select default settings & create a repository.


After creating the repository it will give a URL's.




Nexus Repo Details:
===================
We should configure our Nexus Repo details in pom.xml file. Inside of DistributionManagement tag.
maven-web-application project/pom.xml:

Pom.xml:

<distributionManagement>
<repository>
<id>nexus</id>
<name>Facebook-Releases Nexus Rpository</name>
<url>https://13.221.2.210:9980/mithuntechnologies/repository/facebook-releases/</url>
</repository>

<snaphotRepository>
<id>nexus</id>
<name>Facebook-Snapshots Nexus Rpository</name>
<url>https://13.221.2.210:9980/mithuntechnologies/repository/facebook-snapshots/</url>
</snaphotRepository>
<distributionManagement>

cd /opt/apache-maven-3.8.4/conf/settings.xml file

For adding the Nexus Credentials we should add the nexus credentails in settings.xml file
<servers>
<server>
<id>nexus</id>                    //id would be the same in POM.XML & in settings.xml file
 <username>admin</username>
 <password>admin123</password>
</server>
</servers>


cd -
cd /root/maven-web-application       [here we can find all the directories like docker-compose.yaml Jenkinsfile pom.xml src target Dockerfile .....etc
Below Goals to be execute:
validate
compile 
test
package
install
mvn clean deploy

mvn deploy   ----------which we can used to upload the artifact into remote repository


